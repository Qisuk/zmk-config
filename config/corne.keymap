/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        space_lt: space_lt {
            compatible = "zmk,behavior-toggle-layer";
            label = "SPACE_LT";
            #binding-cells = <1>;
            toggle-mode = "off";
        };

        hyphenAccess: hyphenAccess {
            compatible = "zmk,behavior-tap-dance";
            label = "HYPHENACCESS";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp SEMICOLON>, <&kp MINUS>;
        };

        tap_layer: tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <10>;
            quick-tap-ms = <(-1)>;
            flavor = "balanced";
        };

        slow_tap: slow_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SLOW_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
            require-prior-idle-ms = <210>;
            quick-tap-ms = <150>;
        };

        fast_tap: fast_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "FAST_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };
    };

    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none>;
            label = "COPY";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&mt LS(LA(LEFT_CONTROL)) ESCAPE  &kp Q                 &kp W                 &kp F                     &kp P                   &kp B                &kp J        &kp L                   &kp U              &kp Y                     &kp EQUAL              &kp BSPC
&lt 1 TAB                        &slow_tap LEFT_GUI A  &slow_tap LEFT_ALT R  &slow_tap LEFT_CONTROL S  &fast_tap LEFT_SHIFT T  &kp G                &kp M        &fast_tap LEFT_SHIFT N  &slow_tap LCTRL E  &slow_tap LS(LEFT_ALT) I  &slow_tap RIGHT_WIN O  &kp SQT
&kp NON_US_BACKSLASH             &kp Z                 &slow_tap LC(X) X     &slow_tap LC(C) C         &kp D                   &slow_tap LC(V) V    &kp K        &kp H                   &kp COMMA          &kp DOT                   &kp FSLH               &hyphenAccess
                                                                             &lt 1 TAB                 &kp LSHFT               &lt 2 SPACE          &lt 2 ENTER  &kp LSHFT               &lt 3 DEL
            >;
        };

        nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none       &rgb_ug RGB_SPD  &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI    &msc SCRL_UP    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp BSPC
&none       &kp LGUI         &kp LALT         &kp LCTRL        &kp LSHFT        &rgb_ug RGB_BRD    &msc SCRL_DOWN  &kp LEFT        &kp DOWN        &kp UP        &kp RIGHT        &trans
&bt BT_CLR  &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &trans          &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &tog 1
                                              &none            &trans           &kp SPACE          &kp RET         &mkp LCLK       &mkp MB3
            >;
        };

        nums_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE      &trans            &trans  &kp LBRC  &kp RBRC  &kp PRCNT    &kp PLUS   &kp N1  &kp N2        &kp N3  &kp EQUAL        &kp BSPC
&kp TAB        &kp LT            &kp GT  &kp LPAR  &kp RPAR  &trans       &kp MINUS  &kp N4  &kp N5        &kp N6  &kp NON_US_HASH  &kp AT
&kp BACKSLASH  &kp SINGLE_QUOTE  &trans  &kp LBKT  &kp RBKT  &trans       &kp UNDER  &kp N7  &kp N8        &kp N9  &kp EXCL         &tog 2
                                         &kp LGUI  &trans    &kp LSHFT    &kp LSHFT  &trans  &kp NUMBER_0
            >;
        };

        special_layer {
            bindings = <
&trans  &kp F1        &kp F2        &kp F3         &kp F4          &kp F5     &kp F6   &kp F7  &kp F8  &kp F9  &kp F10  &kp LS(PRINTSCREEN)
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LS(LCTRL)  &kp LEFT_SHIFT  &kp F11    &kp F12  &trans  &trans  &trans  &trans   &trans
&trans  &trans        &trans        &trans         &trans          &gresc     &trans   &trans  &trans  &trans  &trans   &tog 3
                                    &caps_word     &trans          &trans     &trans   &trans  &trans
            >;
        };
    };
};
